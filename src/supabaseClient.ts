import { createClient } from '@supabase/supabase-js';
import { Infographic } from './types';

// Best Practice: Load credentials from environment variables.
// This makes the code more secure and easier to manage across different environments (dev, prod).
// These variables are loaded from your .env file by Vite.
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl) {
  // Provide a more helpful error message for developers.
  throw new Error("VITE_SUPABASE_URL is not defined. Please check your .env file.");
}

if (!supabaseAnonKey) {
  throw new Error("VITE_SUPABASE_ANON_KEY is not defined. Please check your .env file.");
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

// Define a type for your database schema. This helps with TypeScript type safety.
// This should align with the table created in your Supabase project.
export interface Database {
  public: {
    Tables: {
      infographics: {
        Row: Infographic; // The type of data returned from the table (includes id, created_at)
        Insert: Omit<Infographic, 'id' | 'created_at'>; // The type of data to insert (id and created_at are auto-generated by Supabase)
                                                        // 'date' is client-generated and part of the insert
        Update: Partial<Omit<Infographic, 'id' | 'created_at'>>; // The type of data to update
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
  };
}

/**
 * Handles uploading an image file to Supabase storage.
 * @param e The file input change event.
 * @returns The public URL of the uploaded image.
 * @throws An error if the upload fails.
 */
export const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>): Promise<string> => {
  const file = e.target.files?.[0];
  if (!file) {
    throw new Error("No file selected for upload.");
  }

  // Sanitize the original file name to remove or replace invalid characters
  const originalFileName = file.name;
  const sanitizedOriginalFileName = originalFileName.replace(/[^a-zA-Z0-9._-]/g, '_');
  const fileName = `${Date.now()}_${sanitizedOriginalFileName}`;

  const { error } = await supabase.storage
    .from('images')
    .upload(fileName, file);

  if (error) {
    console.error('Error uploading image:', error.message); // Keep this for debugging
    throw new Error(`เกิดข้อผิดพลาดในการอัปโหลดภาพ: ${error.message}`);
  }

  // Return the public URL of the uploaded file
  const { data: { publicUrl } } = supabase.storage.from('images').getPublicUrl(fileName);
  return publicUrl;
};